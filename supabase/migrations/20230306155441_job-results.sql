create table "public"."jobResults" (
    "id" bigint generated by default as identity not null,
    "searchId" bigint,
    "title" text,
    "url" text,
    "user_id" uuid,
    "created_at" timestamp with time zone not null default now(),
    "website" character varying
);


alter table "public"."jobResults" enable row level security;

alter table "public"."searches" add column "executed_at" timestamp with time zone;

CREATE UNIQUE INDEX "jobResults_id_key" ON public."jobResults" USING btree (id);

CREATE UNIQUE INDEX "jobResults_pkey" ON public."jobResults" USING btree (id);

alter table "public"."jobResults" add constraint "jobResults_pkey" PRIMARY KEY using index "jobResults_pkey";

alter table "public"."jobResults" add constraint "jobResults_id_key" UNIQUE using index "jobResults_id_key";

alter table "public"."jobResults" add constraint "jobResults_searchId_fkey" FOREIGN KEY ("searchId") REFERENCES searches(id) not valid;

alter table "public"."jobResults" validate constraint "jobResults_searchId_fkey";

alter table "public"."jobResults" add constraint "jobResults_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."jobResults" validate constraint "jobResults_user_id_fkey";


create policy "user can see their job results"
on "public"."jobResults"
as permissive
for select
to public
using ((auth.uid() = user_id));
